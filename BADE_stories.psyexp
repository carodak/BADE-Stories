<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['conditions/BADE_stories_task_conditions_en.csv', 'conditions/BADE_stories_task_conditions_fr.csv', 'conditions/BADE_stories_task_conditions_practice_en.csv', 'conditions/BADE_stories_task_conditions_practice_fr.csv', 'BADE_en.png', 'BADE_fr.png', 'bundle.min.js', 'button.png']" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.4" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="Gainsboro" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="BADE_stories" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="mouse_clicked = False&amp;#10;# Save the current trial&amp;#10;currentTrial = 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="mouse_clicked = false; //boulean to check if the button was pressed&amp;#10;// Save the current trial&amp;#10;currentTrial = 1;&amp;#10;randomSliders = [];" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="curStatement = 1; //display first statement by default&amp;#10;end_text = &quot;&quot;; //text of ending button&amp;#10;col = new util.Color('black');&amp;#10;slider1_is_initialized = false; //true when we set the color of slider1..&amp;#10;slider2_is_initialized = false;&amp;#10;slider3_is_initialized = false;&amp;#10;slider4_is_initialized = false;&amp;#10;allRatings = false; //true when the user rated on all 4 sliders&amp;#10;&amp;#10;// Save results&amp;#10;trialDuration = -1&amp;#10;&amp;#10;//define sliders (defining them here fix the labels position issue)&amp;#10;&amp;#10;slider1 = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, 0.01], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider2 = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.122], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider3 = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.25], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider4 = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.38], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;&amp;#10;// Shuffle the statements&amp;#10;randomSliders = &amp;#10;[ &amp;#10;    [0, &quot;NL&quot;, sliderSub1, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [1, &quot;EL&quot;, sliderSub2, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [2, &quot;A&quot;, sliderSub3, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [3, &quot;T&quot;, sliderSub4, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ]&amp;#10;];&amp;#10;&amp;#10;function shuffleArray(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        const j = Math.floor(Math.random() * (i + 1));&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;shuffleArray(randomSliders);&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtInstr()&amp;#10;function SetTxtInstr(){&amp;#10;    if (english){&amp;#10;        txt_next.text = &quot;NEXT&quot;;&amp;#10;        end_text = &quot;DONE&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        txt_next.text = &quot;SUIVANT&quot;;&amp;#10;        end_text = &quot;COMPLÉTÉ&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;SetTxtInstr();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import random&amp;#10;&amp;#10;curStatement = 1 #display first statement by default&amp;#10;end_text = &quot;&quot; #text of ending button&amp;#10;col = 'black'&amp;#10;slider1_is_initialized = False #true when we set the color of slider1..&amp;#10;slider2_is_initialized = False&amp;#10;slider3_is_initialized = False&amp;#10;slider4_is_initialized = False&amp;#10;allRatings = False #true when the user rated on all 4 sliders&amp;#10;&amp;#10;#Save results&amp;#10;&amp;#10;trialDuration = -1&amp;#10;&amp;#10;#define sliders (defining them here fix the labels position issue)&amp;#10;slider1 = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, 0.01), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider2 = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.122), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider3 = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.25), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider4 = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.38), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;&amp;#10;# Shuffle the statements&amp;#10;randomSliders = [ \&amp;#10;    [0, &quot;NL&quot;, sliderSub1, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [1, &quot;EL&quot;, sliderSub2, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [2, &quot;A&quot;, sliderSub3, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [3, &quot;T&quot;, sliderSub4, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ]]&amp;#10;&amp;#10;random.shuffle(randomSliders)&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    txt_next.text = &quot;NEXT&quot;&amp;#10;    end_text = &quot;DONE&quot;&amp;#10;else:&amp;#10;    txt_next.text = &quot;SUIVANT&quot;&amp;#10;    end_text = &quot;COMPLÉTÉ&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Prepare the initialisation of the sliders&amp;#10;if slider1_is_initialized == False and statement1.status == STARTED:&amp;#10;    slider1_is_initialized  = True&amp;#10;    slider2_is_initialized  = True&amp;#10;    slider3_is_initialized  = True&amp;#10;    slider4_is_initialized  = True&amp;#10;    &amp;#10;    sliders = (slider1,slider2,slider3,slider4)&amp;#10;    for slider in sliders:&amp;#10;        try:&amp;#10;            slider.marker.color = col&amp;#10;            slider.marker.size = (0.025, 0.025)&amp;#10;            #slider._skin.STANDARD.MARKER_COLOR = col&amp;#10;            #slider._skin.MARKER_SIZE = (0.025, 0.025)&amp;#10;            slider._barSize = (1, 0.01)&amp;#10;            #slider.markerPos = 0.5&amp;#10;            slider._onChange(True)()&amp;#10;            slider._setupSlider()&amp;#10;        except:&amp;#10;            print(&quot;An exception while initializing slider occurred&quot;)&amp;#10;    &amp;#10;#Check if the user rated on all sliders&amp;#10;if slider1.getRating() != None and slider2.getRating() != None and slider3.getRating() != None and slider4.getRating() != None:&amp;#10;    allRatings = True&amp;#10;else:&amp;#10;    allRatings = False&amp;#10;&amp;#10;#Function that will display next instruction or go to next routine&amp;#10;#Code that will display next instruction or go to next routine&amp;#10;if next.contains(mouse) and mouse.getPressed()[0] == True and allRatings:&amp;#10;    if mouse_clicked == False:&amp;#10;        mouse_clicked = True&amp;#10;        if curStatement == 1:&amp;#10;            statement2.setOpacity(1)&amp;#10;            randomSliders[0][3][curStatement-1] = slider1.getRating()&amp;#10;            randomSliders[1][3][curStatement-1] = slider2.getRating()&amp;#10;            randomSliders[2][3][curStatement-1] = slider3.getRating()&amp;#10;            randomSliders[3][3][curStatement-1] = slider4.getRating()&amp;#10;            curStatement = curStatement + 1&amp;#10;        elif curStatement == 2:&amp;#10;            statement3.setOpacity(1)&amp;#10;            randomSliders[0][3][curStatement-1] = slider1.getRating()&amp;#10;            randomSliders[1][3][curStatement-1] = slider2.getRating()&amp;#10;            randomSliders[2][3][curStatement-1] = slider3.getRating()&amp;#10;            randomSliders[3][3][curStatement-1] = slider4.getRating()&amp;#10;            curStatement = curStatement + 1&amp;#10;            txt_next.text = end_text&amp;#10;        else:&amp;#10;            randomSliders[0][3][curStatement-1] = slider1.getRating()&amp;#10;            randomSliders[1][3][curStatement-1] = slider2.getRating()&amp;#10;            randomSliders[2][3][curStatement-1] = slider3.getRating()&amp;#10;            randomSliders[3][3][curStatement-1] = slider4.getRating()&amp;#10;            trialDuration = t&amp;#10;            continueRoutine = False #go to next routine&amp;#10;else:&amp;#10;    mouse_clicked = False&amp;#10;&amp;#10;#Change the color of highlighed rect&amp;#10;if next.contains(mouse):&amp;#10;    next.opacity=0.99&amp;#10;    txt_next.opacity=2&amp;#10;else:&amp;#10;    next.opacity=0.73&amp;#10;    txt_next.opacity=0.73&amp;#10;&amp;#10;#Display rating of each slider&amp;#10;    ratings = ((slider1, sliderV1), (slider2, sliderV2), (slider3, sliderV3), (slider4, sliderV4))&amp;#10;    for slider_ in ratings:&amp;#10;        if slider_[0].getRating():&amp;#10;            slider_[1].text = str(int(round(slider_[0].markerPos))) + &quot;%&quot;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Initialize slider&amp;#10;function InitializeSlider(slider){&amp;#10;     try {&amp;#10;        slider._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider._skin.MARKER_SIZE = [0.025, 0.025];&amp;#10;        slider._barSize = [1, 0.01];&amp;#10;        slider._onChange(true)();&amp;#10;        slider._setupSlider();&amp;#10;    } catch (err) {}&amp;#10;}&amp;#10;&amp;#10;//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Prepare the initialisation of the sliders&amp;#10;function PrepSlidersInit(){&amp;#10;    if (!slider1_is_initialized &amp;&amp; statement1.status === STARTED){&amp;#10;        slider1_is_initialized  = true;&amp;#10;        slider2_is_initialized  = true;&amp;#10;        slider3_is_initialized  = true;&amp;#10;        slider4_is_initialized  = true;&amp;#10;        InitializeSliders();&amp;#10;    }    &amp;#10;}&amp;#10;&amp;#10;//Initialize sliders&amp;#10;function InitializeSliders(){&amp;#10;    const array_ = [slider1,slider2,slider3,slider4];&amp;#10;    array_.map(x =&gt;InitializeSlider(x));&amp;#10;}&amp;#10;&amp;#10;// Check if the user rated on all sliders&amp;#10;function CheckAllRatingsDone(){&amp;#10;    if (slider1.getRating() !== undefined &amp;&amp; slider2.getRating() !== undefined &amp;&amp; slider3.getRating() !== undefined &amp;&amp; slider4.getRating() !== undefined){&amp;#10;        allRatings = true;&amp;#10;     }&amp;#10; else&amp;#10;    allRatings = false;&amp;#10;}&amp;#10;&amp;#10;//Function that will display next instruction or go to next routine&amp;#10;function DisplayNext(){&amp;#10;    //Display next instruction&amp;#10;    if (next.contains(mouse) &amp;&amp; mouse.getPressed()[0] === 1 &amp;&amp; allRatings){&amp;#10;        if (!mouse_clicked){&amp;#10;            mouse_clicked = true;&amp;#10;            if (curStatement === 1){&amp;#10;                statement2.setOpacity(1);&amp;#10;                randomSliders[0][3][curStatement-1] = slider1.getRating();&amp;#10;                randomSliders[1][3][curStatement-1] = slider2.getRating();&amp;#10;                randomSliders[2][3][curStatement-1] = slider3.getRating();&amp;#10;                randomSliders[3][3][curStatement-1] = slider4.getRating();&amp;#10;                curStatement = curStatement + 1;&amp;#10;            }&amp;#10;            else if(curStatement === 2){&amp;#10;                statement3.setOpacity(1);&amp;#10;                txt_next.text = end_text;&amp;#10;                randomSliders[0][3][curStatement-1] = slider1.getRating();&amp;#10;                randomSliders[1][3][curStatement-1] = slider2.getRating();&amp;#10;                randomSliders[2][3][curStatement-1] = slider3.getRating();&amp;#10;                randomSliders[3][3][curStatement-1] = slider4.getRating();&amp;#10;                curStatement = curStatement + 1;&amp;#10;            }&amp;#10;            else{&amp;#10;                randomSliders[0][3][curStatement-1] = slider1.getRating();&amp;#10;                randomSliders[1][3][curStatement-1] = slider2.getRating();&amp;#10;                randomSliders[2][3][curStatement-1] = slider3.getRating();&amp;#10;                randomSliders[3][3][curStatement-1] = slider4.getRating();&amp;#10;                curStatement = curStatement + 1;&amp;#10;                trialDuration = t&amp;#10;                continueRoutine = false; //go to next routine&amp;#10;             }&amp;#10;        }     &amp;#10;    }&amp;#10;    else{&amp;#10;        mouse_clicked = false;&amp;#10;     }&amp;#10;}&amp;#10;&amp;#10;//Display ratings values:&amp;#10;function DisplayRating(slider_,slider_score){&amp;#10;    if(slider_.getRating()){&amp;#10;        slider_score.text = Math.round(slider_.markerPos) + &quot;%&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Display rating of each slider&amp;#10;function DisplayRatings(){&amp;#10;    const array1 = [[slider1, sliderV1],[slider2,sliderV2],[slider3, sliderV3], [slider4, sliderV4]];&amp;#10;    array1.map(x =&gt;DisplayRating(x[0],x[1]));&amp;#10;}&amp;#10;&amp;#10;PrepSlidersInit();&amp;#10;CheckAllRatingsDone();&amp;#10;DisplayNext();&amp;#10;HighlightRect(next, txt_next, mouse);&amp;#10;DisplayRatings();" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Save results&amp;#10;&amp;#10;//Save the order the statements were presented &amp;#10;psychoJS.experiment.addData('slidersRandomized', randomSliders);&amp;#10;&amp;#10;// Reorder array&amp;#10;function sortArray(a, b) {&amp;#10;    if (a[0] === b[0]) {&amp;#10;        return 0;&amp;#10;    }&amp;#10;    else {&amp;#10;        return (a[0] &lt; b[0]) ? -1 : 1;&amp;#10;    }&amp;#10;}&amp;#10;randomSliders.sort(sortArray);&amp;#10;&amp;#10;for (let i=0; i&lt;4; i++){&amp;#10;    let statementType = randomSliders[i][1];&amp;#10;    for (let j=0; j&lt;3; j++){&amp;#10;        let strStatement = &quot;statement&quot;.concat((j+1).toString(),&quot;_&quot;, statementType);&amp;#10;        psychoJS.experiment.addData(strStatement, randomSliders[i][3][j]);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;psychoJS.experiment.addData('trialDuration', trialDuration);&amp;#10;psychoJS.experiment.addData('currentTrial', currentTrial);&amp;#10;currentTrial = currentTrial + 1;&amp;#10;&amp;#10;//Reset some elements for next trial&amp;#10;function ResetElements(){&amp;#10;    statement2.setOpacity(0);&amp;#10;    statement3.setOpacity(0);&amp;#10;    const array2 = [sliderV1, sliderV2, sliderV3, sliderV4];&amp;#10;    array2.map(x =&gt;x.text=&quot;&quot;);&amp;#10;}&amp;#10;&amp;#10;ResetElements();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#Save the order the statements were presented &amp;#10;thisExp.addData('slidersRandomized', randomSliders)&amp;#10;&amp;#10;#Reorder array&amp;#10;randomSliders = sorted(randomSliders, key=lambda x: x[0])&amp;#10;&amp;#10;for i in range(0, 4):&amp;#10;    statementType = randomSliders[i][1]&amp;#10;    for j in range(0, 3):&amp;#10;        strStatement = &quot;statement&quot;+str(j+1)+&quot;_&quot;+ statementType&amp;#10;        thisExp.addData(strStatement, randomSliders[i][3][j])&amp;#10;&amp;#10;thisExp.addData('trialDuration', trialDuration)&amp;#10;thisExp.addData('currentTrial', currentTrial)&amp;#10;currentTrial = currentTrial + 1&amp;#10;&amp;#10;# See https://discourse.psychopy.org/t/exp-adddata-is-saving-only-one-value/14344/6&amp;#10;#thisExp.nextEntry()&amp;#10;&amp;#10;#Reset some elements for next trial&amp;#10;statement2.opacity=0&amp;#10;statement3.opacity=0&amp;#10;array2 = (sliderV1, sliderV2, sliderV3, sliderV4)&amp;#10;for arr in array2:&amp;#10;    arr.text=&quot;&quot;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="stateBox">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="lightGrey" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="lightGrey" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="stateBox" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.285)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(1.4, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="statement1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state1" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="statement2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement2" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.28)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state2" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="statement3">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement3" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.21)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state3" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="slider1">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="'0%','100%'" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.01)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0,100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider2">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.122)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider3">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider4">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.38)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="sliderS1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider1.pos[0],slider1.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders[0][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider2.pos[0],slider2.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders[1][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS3">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider3.pos[0],slider3.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders[2][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS4">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider4.pos[0],slider4.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders[3][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV1">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider1.pos[0]+0.74, slider1.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV2">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider2.pos[0]+0.74, slider2.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV3">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider3.pos[0]+0.74, slider3.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV4">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider4.pos[0]+0.74, slider4.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.463)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$allRatings" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$allRatings" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse">
        <Param val="next" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="lang">
      <CodeComponent name="code_lang">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* &amp;#10;Use danfos to convert the data into dataframe&amp;#10;We will be able to make calculations on the data more easily&amp;#10;and in a clearer way for a future reading of the code.&amp;#10;The calculations are also similar to those with Python and Pandas,&amp;#10;so it is less work.&amp;#10;*/&amp;#10;&amp;#10;var danfosUrl = './bundle.min.js';&amp;#10;&amp;#10;function dynamicallyLoadScript(url) {&amp;#10;    var script = document.createElement(&quot;script&quot;);  // create a script DOM node&amp;#10;    script.src = url;  // set its src to the provided URL&amp;#10;&amp;#10;    document.head.appendChild(script);  // add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)&amp;#10;}&amp;#10;&amp;#10;dynamicallyLoadScript(danfosUrl);" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import re&amp;#10;import pandas as pd&amp;#10;import os, ssl&amp;#10;import json&amp;#10;import datetime&amp;#10;&amp;#10;startingDate = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M&quot;)&amp;#10;&amp;#10;#Set french or english variable to true when the language is selected&amp;#10;french = False&amp;#10;english = False&amp;#10;&amp;#10;practiceConditions = &quot;&quot;&amp;#10;trialConditions = &quot;&quot;&amp;#10;&amp;#10;redcapVars = []&amp;#10;&amp;#10;#Remove illegal characters in participants' name to avoid errors in filenames&amp;#10;expInfo['participant'] = re.sub('[^\w_.)( -]', '', expInfo['participant'])&amp;#10;&amp;#10;#Load redcap variable&amp;#10;if not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):&amp;#10;    try:&amp;#10;        ssl._create_default_https_context = ssl._create_unverified_context&amp;#10;        sheet_url = &quot;https://docs.google.com/spreadsheets/d/1HKhUnueu7nKidtb37oh2HPwGXNgj5b4i6DsxrUrUOCM/edit#gid=0&quot;&amp;#10;        url_1 = sheet_url.replace('/edit#gid=', '/export?format=csv&amp;gid=')&amp;#10;        dfRed = pd.read_csv(url_1)&amp;#10;        nbCol = 9 #Change it if we change the google sheet&amp;#10;        for i in range(1, nbCol):&amp;#10;            redcapVars.append(dfRed.iloc[0,i])&amp;#10;    except:&amp;#10;        print(&quot;An exception occurred. The redcap variables could not be found.&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="date1 = new Date().toLocaleString(&quot;en-US&quot;, {timeZone: &quot;America/New_York&quot;});&amp;#10;d = new Date(date1);&amp;#10;startingDate =  d.getFullYear() + &quot;-&quot; + (d.getMonth()+1) + &quot;-&quot; + d.getDate() + &quot; &quot; +&amp;#10;d.getHours() + &quot;:&quot; + d.getMinutes();&amp;#10;&amp;#10;//Set french or english variable to true when the language is selected&amp;#10;french = false;&amp;#10;english = false;&amp;#10;&amp;#10;practiceConditions = &quot;&quot;;&amp;#10;trialConditions = &quot;&quot;;&amp;#10;&amp;#10;redcapVars = [];&amp;#10;&amp;#10;//Remove illegal characters in participants' name to avoid errors in filenames&amp;#10;function CheckFilename(){&amp;#10;   expInfo['participant']= expInfo['participant'].replace(/([^.a-z0-9]+)/gi, '-');&amp;#10;}&amp;#10;&amp;#10;// Load redcap variables from Google Spreadsheet&amp;#10;function LoadRedcapVars(redcapVars){&amp;#10;    try {&amp;#10;        // Retrieve data between B2 and max range&amp;#10;        let url = &quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vR2HrrKB78yxkxRABtTlghA1reADPaQN32V5oJ2BbRXEZOhr8YrkGDZaIVZtjqNMXWTLzeG6-xRaEBl/pub?gid=0&amp;range=B2:AA2&amp;output=csv&quot;;&amp;#10;        var xmlhttp = new XMLHttpRequest();&amp;#10;        xmlhttp.onreadystatechange = function () {&amp;#10;            if (xmlhttp.readyState == 4) {&amp;#10;                let array = xmlhttp.responseText.split(',');&amp;#10;                for (let i = 0; i &lt; array.length; i++) {&amp;#10;                    redcapVars.push(array[i]);&amp;#10;                }&amp;#10;            }&amp;#10;        };&amp;#10;        xmlhttp.open(&quot;GET&quot;, url, true);&amp;#10;        xmlhttp.send(null);&amp;#10;        return redcapVars;&amp;#10;    }&amp;#10;    catch(err) {&amp;#10;        console.log(&quot;Erreur while loading Redcap variables&quot;, err.message);&amp;#10;    }&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;CheckFilename();&amp;#10;redcapVars = LoadRedcapVars(redcapVars);" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Change the color of highlighed rect&amp;#10;if button1.contains(mouse1):&amp;#10;    button1.opacity=0.99&amp;#10;    txt_button1.opacity=2&amp;#10;else:&amp;#10;    button1.opacity = 0.73&amp;#10;    txt_button1.opacity = 0.73&amp;#10;    &amp;#10;if button2.contains(mouse1):&amp;#10;    button2.opacity=0.99&amp;#10;    txt_button2.opacity=2&amp;#10;else:&amp;#10;    button2.opacity=0.73&amp;#10;    txt_button2.opacity=0.73&amp;#10;    &amp;#10;#Function that is going to set the chosen language&amp;#10;if button1.contains(mouse1) and mouse1.getPressed()[0] == 1:&amp;#10;        french = True&amp;#10;        practiceConditions = &quot;conditions/BADE_stories_task_conditions_practice_fr.csv&quot;&amp;#10;        trialConditions = &quot;conditions/BADE_stories_task_conditions_fr.csv&quot;&amp;#10;&amp;#10;&amp;#10;elif button2.contains(mouse1) and mouse1.getPressed()[0] == 1:&amp;#10;        english = True&amp;#10;        practiceConditions = &quot;conditions/BADE_stories_task_conditions_practice_en.csv&quot;&amp;#10;        trialConditions = &quot;conditions/BADE_stories_task_conditions_en.csv&quot;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, rec2, txt_rec1, txt_rec2, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;     if (rec2.contains(mouse)) {&amp;#10;        rec2.setOpacity(0.99);&amp;#10;        txt_rec2.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec2.setOpacity(0.73);&amp;#10;        txt_rec2.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Function that is going to set the chosen language&amp;#10;function SelectLanguage(rec1, rec2, mouse){&amp;#10;    if (rec1.contains(mouse) &amp;&amp; mouse.getPressed()[0] === 1 ) {&amp;#10;        french = true;&amp;#10;        practiceConditions = &quot;conditions/BADE_stories_task_conditions_practice_fr.csv&quot;;&amp;#10;        trialConditions = &quot;conditions/BADE_stories_task_conditions_fr.csv&quot;;&amp;#10;    }&amp;#10;    else if (rec2.contains(mouse) &amp;&amp; mouse.getPressed()[0] === 1 ) {&amp;#10;        english = true;&amp;#10;        practiceConditions = &quot;conditions/BADE_stories_task_conditions_practice_en.csv&quot;;&amp;#10;        trialConditions = &quot;conditions/BADE_stories_task_conditions_en.csv&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(button1,  button2, txt_button1, txt_button2, mouse1);&amp;#10;SelectLanguage(button1,  button2, mouse1);&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="thisExp.addData(&quot;Language&quot;, english===true ? &quot;en&quot; : &quot;fr&quot;);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if english==True:&amp;#10;    thisExp.addData(&quot;Language&quot;, &quot;en&quot;)&amp;#10;else:&amp;#10;    thisExp.addData(&quot;Language&quot;, &quot;fr&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_lang" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="button1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="button1" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.02)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="button2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="button2" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.07)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_instr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_instr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.18)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Veuillez sélectionner votre langue.&amp;#10;&amp;#10;Please select your language." valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="txt_button1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_button1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="button1.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="FRANÇAIS" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="txt_button2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_button2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="button2.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="ENGLISH" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse1">
        <Param val="button1, button2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instr">
      <CodeComponent name="code_i">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#We'll set the picture depending on the language&amp;#10;img_instr = &quot;&quot;&amp;#10;&amp;#10;end_instr_text1=&quot;&quot;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;&amp;#10;//We'll set the picture depending on the language&amp;#10;img_instr = &quot;&quot;;&amp;#10;&amp;#10;end_instr_text1=&quot;&quot;;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="curInstr = 1; //value of the current displayed instr&amp;#10;instr_clicked = false; //true if we clicked on instr1&amp;#10;//Change the text according to the selected language, function SetTxtInstr()&amp;#10;function SetTxtInstr(){&amp;#10;    if (english){&amp;#10;        expTitle.text = &quot;Story task&quot;;&amp;#10;        expEx.text = &quot;(Example)&quot;;&amp;#10;        img_instr = &quot;BADE_en.png&quot;;&amp;#10;        instr_text_1.text = &quot;You will be shown three statements, presented one at a time, describing an event or person. Each new statement will provide additional information about the event or person that is being described. Below the statements, you will also see four interpretations about the event or person being described in the statement(s). Each interpretation has its own scale (from 0 - 100%), where you will be asked to rate the likelihood of each interpretation given the information described in the statement(s). Rate how well you believe each interpretation relates to the event or person described in the statement(s).&quot;;&amp;#10;        instr_text_1_2 = new visual.TextStim({&quot;win&quot;: win, &quot;color&quot;:[-1,-1,-1], &quot;colorSpace&quot;:'rgb', &quot;font&quot;: &quot;Arial&quot;, &quot;height&quot;: 0.022,&quot;pos&quot;:[0, -0.38],&quot;bold&quot;:true});&amp;#10;        instr_text_1_2.text = &quot;It is important to rate each of the four interpretations independently from one another. Do not compare the interpretations to each other. The total of the interpretations should not necessarily equal 100%.&quot;;&amp;#10;        instr_text_2.text = &quot;\n\nAs each new statement is shown, reconsider the ratings you have assigned to each interpretation. Ratings for each interpretation can be changed as much or as little as you like, or can be kept the same if you feel that they have not changed with the addition of a new statement. It is possible that none or many of the interpretations will be a good fit for the statements.\n\nYou will be using the mouse or touchpad to make your ratings. Click on 'Next' to display the next statement. After you have seen all three statements, click 'Done' to move to the next trial. You will now complete 2 practice trials before beginning the experiment.&quot;;&amp;#10;        txt_next_i.text = &quot;NEXT&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        expTitle.text = &quot;Tâche d'histoires&quot;;&amp;#10;        expEx.text = &quot;(Exemple)&quot;;&amp;#10;        img_instr = &quot;BADE_fr.png&quot;;&amp;#10;        instr_text_1.text = &quot;Trois énoncés vous seront montrés, un à la fois. Chacun décrit un événement ou une personne. Chaque nouvel énoncé apportera de l’information additionnelle à propos de l’événement ou de la personne décrit(e). Sous les énoncés, vous verrez aussi quatre interprétations de l’événement ou de la personne décrit(e) dans le(les) énoncé(s). Chaque interprétation a sa propre échelle (de 0 – 100%), vous aurez donc à évaluer la probabilité que chaque interprétation décrive l’énoncé, selon les informations données. Évaluez à quel point vous pensez que chaque interprétation se rapporte à l’évènement ou la personne décrite dans l’(les) énoncé(s).&quot;;&amp;#10;        instr_text_1_2 = new visual.TextStim({&quot;win&quot;: win, &quot;color&quot;:[-1,-1,-1], &quot;colorSpace&quot;:'rgb', &quot;font&quot;: &quot;Arial&quot;, &quot;height&quot;: 0.022,&quot;pos&quot;:[0, -0.38],&quot;bold&quot;:true});&amp;#10;        instr_text_1_2.text = &quot;Il est important d’évaluer chacune des quatre interprétations indépendamment les unes des autres. Ne comparez pas les interprétations entres elles. Le total des interprétations ne doit pas faire nécessairement 100%.&quot;;&amp;#10;        instr_text_2.text = &quot;\n\nÀ chaque nouvel énoncé présenté, reconsidérez les évaluations que vous avez assignées à chaque interprétation. Les évaluations des interprétations peuvent être changées autant que vous le voulez, vous pouvez aussi les laisser intactes, si vous avez l’impression qu’elles n'ont pas changé avec l’addition de nouveaux énoncés. Il est possible qu’aucune ou que plusieurs interprétations soi(en)t un bon pairage avec les énoncés.\n\nVous utiliserez la souris ou le pavé tactile pour faire vos évaluations. Appuyez sur ‘Suivant’ pour afficher le prochain énoncé. Après avoir vu tous les trois énoncés, appuyez sur ‘Complété’, pour accéder à l’essai suivant. Vous allez maintenant faire 2 essais de pratique, avant de commencer l’exercice.&quot;;&amp;#10;        txt_next_i.text = &quot;SUIVANT&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;SetTxtInstr();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="curInstr = 1 #value of the current displayed instr&amp;#10;instr_clicked = False #true if we clicked on instr1&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    expTitle.text = &quot;Story task&quot;&amp;#10;    expEx.text = &quot;(Example)&quot;&amp;#10;    img_instr = &quot;BADE_en.png&quot;&amp;#10;    instr_text_1.text = &quot;You will be shown three statements, presented one at a time, describing an event or person. Each new statement will provide additional information about the event or person that is being described. Below the statements, you will also see four interpretations about the event or person being described in the statement(s). Each interpretation has its own scale (from 0 - 100%), where you will be asked to rate the likelihood of each interpretation given the information described in the statement(s). Rate how well you believe each interpretation relates to the event or person described in the statement(s).&quot;&amp;#10;    instr_text_1_2 = visual.TextStim(win=win, color=(-1,-1,-1), colorSpace='rgb', font=&quot;Arial&quot;, height=0.022, pos=(0, -0.38), bold=True)&amp;#10;    instr_text_1_2.text = &quot;It is important to rate each of the four interpretations independently from one another. Do not compare the interpretations to each other. The total of the interpretations should not necessarily equal 100%.&quot;&amp;#10;    instr_text_2.text = &quot;\n\nAs each new statement is shown, reconsider the ratings you have assigned to each interpretation. Ratings for each interpretation can be changed as much or as little as you like, or can be kept the same if you feel that they have not changed with the addition of a new statement. It is possible that none or many of the interpretations will be a good fit for the statements.\n\nYou will be using the mouse or touchpad to make your ratings. Click on 'Next' to display the next statement. After you have seen all three statements, click 'Done' to move to the next trial. You will now complete 2 practice trials before beginning the experiment.&quot;&amp;#10;    txt_next_i.text = &quot;NEXT&quot;&amp;#10;else:&amp;#10;    expTitle.text = &quot;Tâche d'histoires&quot;&amp;#10;    expEx.text = &quot;(Exemple)&quot;&amp;#10;    img_instr = &quot;BADE_fr.png&quot;&amp;#10;    instr_text_1.text = &quot;Trois énoncés vous seront montrés, un à la fois. Chacun décrit un événement ou une personne. Chaque nouvel énoncé apportera de l’information additionnelle à propos de l’événement ou de la personne décrit(e). Sous les énoncés, vous verrez aussi quatre interprétations de l’événement ou de la personne décrit(e) dans le(les) énoncé(s). Chaque interprétation a sa propre échelle (de 0 – 100%), vous aurez donc à évaluer la probabilité que chaque interprétation décrive l’énoncé, selon les informations données. Évaluez à quel point vous pensez que chaque interprétation se rapporte à l’évènement ou la personne décrite dans l’(les) énoncé(s).&quot;&amp;#10;    instr_text_1_2 = visual.TextStim(win=win, color=(-1,-1,-1), colorSpace='rgb', font=&quot;Arial&quot;, height=0.022, pos=(0, -0.38), bold=True)&amp;#10;    instr_text_1_2.text = &quot;Il est important d’évaluer chacune des quatre interprétations indépendamment les unes des autres. Ne comparez pas les interprétations entres elles. Le total des interprétations ne doit pas faire nécessairement 100%.&quot;&amp;#10;    instr_text_2.text = &quot;\n\nÀ chaque nouvel énoncé présenté, reconsidérez les évaluations que vous avez assignées à chaque interprétation. Les évaluations des interprétations peuvent être changées autant que vous le voulez, vous pouvez aussi les laisser intactes, si vous avez l’impression qu’elles n'ont pas changé avec l’addition de nouveaux énoncés. Il est possible qu’aucune ou que plusieurs interprétations soi(en)t un bon pairage avec les énoncés.\n\nVous utiliserez la souris ou le pavé tactile pour faire vos évaluations. Appuyez sur ‘Suivant’ pour afficher le prochain énoncé. Après avoir vu tous les trois énoncés, appuyez sur ‘Complété’, pour accéder à l’essai suivant. Vous allez maintenant faire 2 essais de pratique, avant de commencer l’exercice.&quot;&amp;#10;    txt_next_i.text = &quot;SUIVANT&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Function that will display next instruction or go to next routine&amp;#10;#Display next instruction&amp;#10;if next_i.contains(mouse_i) and mouse_i.getPressed()[0] == True:&amp;#10;    if instr_clicked == False:&amp;#10;        instr_clicked = True&amp;#10;        if curInstr == 1:&amp;#10;            instr_text_1.opacity=0&amp;#10;            instr_text_1_2.opacity=0&amp;#10;            instr_text_2.opacity=1&amp;#10;            curInstr = 2&amp;#10;        else:&amp;#10;            continueRoutine = False #go to next routine&amp;#10;else:&amp;#10;    instr_clicked = False&amp;#10;&amp;#10;#Change the color of highlighed rect&amp;#10;if next_i.contains(mouse_i):&amp;#10;    next_i.opacity=0.99&amp;#10;    txt_next_i.opacity=2&amp;#10;else:&amp;#10;    next_i.opacity=0.73&amp;#10;    txt_next_i.opacity=0.73" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Function that will display next instruction or go to next routine&amp;#10;function DisplayNext(){&amp;#10;    //Display next instruction&amp;#10;    if (next_i.contains(mouse_i) &amp;&amp; mouse_i.getPressed()[0] === 1){&amp;#10;        if (!instr_clicked){&amp;#10;            instr_clicked = true;&amp;#10;            if (curInstr === 1){&amp;#10;                instr_text_1.setOpacity(0);&amp;#10;                instr_text_1_2.setOpacity(0);&amp;#10;                instr_text_2.setOpacity(1);&amp;#10;                curInstr = 2;&amp;#10;                }&amp;#10;            else{&amp;#10;               continueRoutine = false; //go to next routine&amp;#10;             }&amp;#10;        }     &amp;#10;    }&amp;#10;    else{&amp;#10;        instr_clicked = false;&amp;#10;     }&amp;#10;}&amp;#10;&amp;#10;//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(next_i, txt_next_i, mouse_i);&amp;#10;&amp;#10;DisplayNext();" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_i" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="expTitle">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="expTitle" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.395)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Story task" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="expEx">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.018" valType="code" updates="constant" name="letterHeight"/>
        <Param val="expEx" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.345)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(Example)" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="img_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_instr" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="img_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.09)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.737,0.47)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="instr_text_1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.021" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instr_text_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.245)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instr_text_1_2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.021" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instr_text_1_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.27)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instr_text_2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.021" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instr_text_2" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.245)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Any text&amp;#10;&amp;#10;including line breaks" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_i" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.463)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_i">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_i.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_i">
        <Param val="next_i" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_i" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="thanks">
      <CodeComponent name="code_thx">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//Change the text according to the selected language, function SetTxtInstr2()&amp;#10;function SetTxtReady(){&amp;#10;    if (english){&amp;#10;        thx.text = &quot;Thank you for your participation!&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        thx.text = &quot;Merci de votre participation!&quot;;&amp;#10;    }&amp;#10;}&amp;#10;function GetData(){&amp;#10;    try{&amp;#10;        let data = thisExp._trialsData;&amp;#10;        //console.log(&quot;data: &quot;, data);&amp;#10;        /* Make array objects all have the same keys */&amp;#10;        let defaults = { &quot;Language&quot; : &quot;&quot;, &quot;participant&quot; : &quot;&quot;, &quot;date&quot; : &quot;&quot;, &quot;session&quot;: &quot;&quot;, &quot;expName:&quot;:&quot;&quot;, &amp;#10;        &quot;psychopyVersion&quot;: &quot;&quot;, &quot;OS&quot;: &quot;&quot;, &quot;frameRate&quot;: &quot;&quot;, &quot;mouse_i.x&quot;: &quot;&quot;, &quot;mouse_i.y&quot;: &quot;&quot;, &amp;#10;        &quot;mouse_i.leftButton&quot;: &quot;&quot;, &quot;mouse_i.midButton&quot;: &quot;&quot;, &quot;mouse_i.rightButton&quot;: &quot;&quot;, &quot;mouse_i.time&quot;: &quot;&quot;, &amp;#10;        &quot;mouse_i.clicked_name&quot;: &quot;&quot;, &quot;currentTrial&quot; : &quot;&quot;, &quot;statement1_NL&quot;: &quot;&quot;, &quot;statement1_EL&quot;: &quot;&quot;, &quot;statement1_A&quot;: &quot;&quot;, &quot;statement1_T&quot;: &quot;&quot;, &amp;#10;        &quot;statement2_NL&quot;: &quot;&quot;, &quot;statement2_EL&quot;: &quot;&quot;, &quot;statement2_A&quot;: &quot;&quot;, &quot;statement2_T&quot;: &quot;&quot;, &amp;#10;        &quot;statement3_NL&quot;: &quot;&quot;, &quot;statement3_EL&quot;: &quot;&quot;, &quot;statement3_A&quot;: &quot;&quot;, &quot;statement3_T&quot;: &quot;&quot;, &quot;trialDuration&quot;: &quot;&quot;, &quot;Type&quot;: &quot;&quot;};&amp;#10;        data = $.map( data, function( item ){&amp;#10;            return $.extend( {}, defaults, item ); &amp;#10;        });&amp;#10;        &amp;#10;        // Create all the variables we will need&amp;#10;        let data2 = [&quot;average_non_filler_statement1_NL&quot;, &quot;average_non_filler_statement1_EL&quot;,&amp;#10;        &quot;average_non_filler_statement1_A&quot;, &quot;average_non_filler_statement1_T&quot;, &amp;#10;        &quot;average_non_filler_statement2_NL&quot;, &quot;average_non_filler_statement2_EL&quot;,&amp;#10;        &quot;average_non_filler_statement2_A&quot;, &quot;average_non_filler_statement2_T&quot;,&amp;#10;        &quot;average_non_filler_statement3_NL&quot;, &quot;average_non_filler_statement3_EL&quot;,&amp;#10;        &quot;average_non_filler_statement3_A&quot;, &quot;average_non_filler_statement3_T&quot;,&amp;#10;        &quot;average_non_filler_trialDuration&quot;, &quot;sBADE_evidence_integration&quot;, &amp;#10;        &quot;sBADE_evidence_integration_norm_rev&quot;, &quot;sBADE_conservatism&quot;, &quot;sBADE_trial_duration&quot;];&amp;#10;        &amp;#10;        // Add them to the data&amp;#10;        for (let i = 0; i &lt; data2.length; i++) {&amp;#10;            data[data2[i]] = &quot;&quot;;&amp;#10;        }&amp;#10;        &amp;#10;        // Create our dataframe where we will compute all the values&amp;#10;        &amp;#10;        let df1 = new dfd.DataFrame(data);&amp;#10;        &amp;#10;        // Select trials (practice number is non existent)&amp;#10;        df1 = df1.loc({&amp;#10;            rows: df1[&quot;currentTrial&quot;].gt(0)&amp;#10;        });&amp;#10;        df1.resetIndex({ inplace: true });&amp;#10;&amp;#10;        // We will compute the scores&amp;#10;        &amp;#10;        df1[&quot;statement1_NL&quot;] = df1['statement1_NL'].div(100);&amp;#10;        df1[&quot;statement1_EL&quot;] = df1['statement1_EL'].div(100);&amp;#10;        df1[&quot;statement1_A&quot;] = df1['statement1_A'].div(100);&amp;#10;        df1[&quot;statement1_T&quot;] = df1['statement1_T'].div(100);&amp;#10;&amp;#10;        df1[&quot;statement2_NL&quot;] = df1['statement2_NL'].div(100);&amp;#10;        df1[&quot;statement2_EL&quot;] = df1['statement2_EL'].div(100);&amp;#10;        df1[&quot;statement2_A&quot;] = df1['statement2_A'].div(100);&amp;#10;        df1[&quot;statement2_T&quot;] = df1['statement2_T'].div(100);&amp;#10;&amp;#10;        df1[&quot;statement3_NL&quot;] = df1['statement3_NL'].div(100);&amp;#10;        df1[&quot;statement3_EL&quot;] = df1['statement3_EL'].div(100);&amp;#10;        df1[&quot;statement3_A&quot;] = df1['statement3_A'].div(100);&amp;#10;        df1[&quot;statement3_T&quot;] = df1['statement3_T'].div(100);&amp;#10;        &amp;#10;        let sub_df = df1.iloc({&amp;#10;            rows: df1[&quot;Type&quot;].eq(&quot;non-filler&quot;)&amp;#10;        });&amp;#10;        sub_df.resetIndex({ inplace: true });&amp;#10;        &amp;#10;        // Compute means&amp;#10;        df1[&quot;average_non_filler_statement1_NL&quot;] = sub_df[&quot;statement1_NL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement1_EL&quot;] = sub_df[&quot;statement1_EL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement1_A&quot;] = sub_df[&quot;statement1_A&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement1_T&quot;] = sub_df[&quot;statement1_T&quot;].mean();&amp;#10;        &amp;#10;        df1[&quot;average_non_filler_statement2_NL&quot;] = sub_df[&quot;statement2_NL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement2_EL&quot;] = sub_df[&quot;statement2_EL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement2_A&quot;] = sub_df[&quot;statement2_A&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement2_T&quot;] = sub_df[&quot;statement2_T&quot;].mean();&amp;#10;&amp;#10;        df1[&quot;average_non_filler_statement3_NL&quot;] = sub_df[&quot;statement3_NL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement3_EL&quot;] = sub_df[&quot;statement3_EL&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement3_A&quot;] = sub_df[&quot;statement3_A&quot;].mean();&amp;#10;        df1[&quot;average_non_filler_statement3_T&quot;] = sub_df[&quot;statement3_T&quot;].mean();&amp;#10;&amp;#10;        df1[&quot;average_non_filler_trialDuration&quot;] = sub_df[&quot;trialDuration&quot;].mean();&amp;#10;        &amp;#10;        // Compute sBADE evidence integration&amp;#10;        let sum1 = df1[&quot;average_non_filler_statement1_A&quot;]+df1[&quot;average_non_filler_statement2_A&quot;]+df1[&quot;average_non_filler_statement3_A&quot;]+df1[&quot;average_non_filler_statement2_NL&quot;]+df1[&quot;average_non_filler_statement2_EL&quot;]+df1[&quot;average_non_filler_statement3_NL&quot;]+df1[&quot;average_non_filler_statement3_EL&quot;];&amp;#10;        df1[&quot;sBADE_evidence_integration&quot;] = sum1-df1[&quot;average_non_filler_statement3_T&quot;];&amp;#10;        &amp;#10;        //console.log(&quot;sBADE_evidence_integration&quot;, df1[&quot;sBADE_evidence_integration&quot;]);&amp;#10;        &amp;#10;        // Compute sBADE_conservatism&amp;#10;        let sum2 = df1[&quot;average_non_filler_statement1_NL&quot;]+df1[&quot;average_non_filler_statement1_EL&quot;]+df1[&quot;average_non_filler_statement1_T&quot;]+df1[&quot;average_non_filler_statement2_NL&quot;]+df1[&quot;average_non_filler_statement2_EL&quot;]+df1[&quot;average_non_filler_statement2_T&quot;]+df1[&quot;average_non_filler_statement3_T&quot;];&amp;#10;        df1[&quot;sBADE_conservatism&quot;] = sum2;&amp;#10;        &amp;#10;        //console.log(&quot;sBADE_conservatism&quot;, df1[&quot;sBADE_conservatism&quot;]);&amp;#10;        &amp;#10;        df1[&quot;sBADE_trial_duration&quot;] = df1['average_non_filler_trialDuration'];&amp;#10;        &amp;#10;        /* &amp;#10;        Compute reverse sBADE evidence integration&amp;#10;        https://stackoverflow.com/questions/929103/convert-a-number-range-to-another-range-maintaining-ratio&amp;#10;        */&amp;#10;        let oldMax, oldMin, newMax, newMin, oldRange, newRange, newValue, oldValue;&amp;#10;        oldMax = -1; oldMin = 7; newMax = 1; newMin = 0; oldRange = oldMax-oldMin; newRange = newMax-newMin; oldValue = df1[&quot;sBADE_evidence_integration&quot;];&amp;#10;        newValue = (((oldValue-oldMin)*newRange)/oldRange)+newMin;&amp;#10;        &amp;#10;        df1[&quot;sBADE_evidence_integration_norm_rev&quot;] = newValue;&amp;#10;       &amp;#10;        //console.log(&quot;new dataframe: &quot;, df1);&amp;#10;        &amp;#10;        let taskVersion = &quot;Online_v3.1.0&quot;; // Version of the task&amp;#10;        &amp;#10;        const exp_name = &quot;iCog_BADE_stories_short&quot;;&amp;#10;        &amp;#10;        df1[&quot;date_exp&quot;] = startingDate;&amp;#10;        df1[&quot;task_version&quot;] = taskVersion;&amp;#10;        &amp;#10;        // Save dataframe inside the logfile&amp;#10;        psychoJS.experiment.addData('date_exp', df1[&quot;date_exp&quot;]);&amp;#10;        psychoJS.experiment.addData('task_version', df1[&quot;task_version&quot;]);&amp;#10;        psychoJS.experiment.addData('sBADE_evidence_integration', df1[&quot;sBADE_evidence_integration&quot;]);&amp;#10;        psychoJS.experiment.addData('sBADE_evidence_integration_norm_rev', df1[&quot;sBADE_evidence_integration_norm_rev&quot;]);&amp;#10;        psychoJS.experiment.addData('sBADE_conservatism', df1[&quot;sBADE_conservatism&quot;]);&amp;#10;        psychoJS.experiment.addData('sBADE_trial_duration', df1[&quot;sBADE_trial_duration&quot;]);&amp;#10;        return df1;&amp;#10;    }&amp;#10;    catch(err) {&amp;#10;        console.log(&quot;Error while computing scores.&quot;);&amp;#10;        dumpError(err);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function REDCapImportRecord(df1) {&amp;#10;    try{&amp;#10;      const url = 'https://portal.rimuhc.ca/cim/redcap/api/';&amp;#10;      let testdata;&amp;#10;      // Warning: If we add or remove columns in the Google file, we must also change the variables here&amp;#10;      testdata = [{&amp;#10;                record_id: df1.loc({rows: [0], columns: [&quot;participant&quot;]}).values[0][0],&amp;#10;                [redcapVars[1]]: df1[&quot;date_exp&quot;],&amp;#10;                [redcapVars[2]]: df1[&quot;task_version&quot;],&amp;#10;                [redcapVars[3]]: df1[&quot;sBADE_evidence_integration&quot;],&amp;#10;                [redcapVars[4]]: df1[&quot;sBADE_evidence_integration_norm_rev&quot;],&amp;#10;                [redcapVars[5]]: df1[&quot;sBADE_conservatism&quot;],&amp;#10;                [redcapVars[6]]: df1[&quot;sBADE_trial_duration&quot;]&amp;#10;      }];&amp;#10;      &amp;#10;      testdata = JSON.stringify(testdata);&amp;#10;      //console.log(&quot;testdata: &quot;, testdata);&amp;#10;&amp;#10;      const body = new FormData();&amp;#10;      body.append('token', redcapVars[0]);&amp;#10;      body.append('content', 'record');&amp;#10;      body.append('format', 'json');&amp;#10;      body.append('overwriteBehavior', 'normal');&amp;#10;      body.append('data', testdata);&amp;#10;      body.append('returnContent', 'ids');&amp;#10;&amp;#10;      const params = {&amp;#10;        method: 'POST',&amp;#10;        body,&amp;#10;      }&amp;#10;&amp;#10;    return fetch(url, params)&amp;#10;      .then(data =&gt; {&amp;#10;        console.log('fetch data: ', data);&amp;#10;      })&amp;#10;      .catch(error =&gt; console.log('Error: ', error))&amp;#10; &amp;#10;    }&amp;#10;    catch(err) {&amp;#10;      console.log(&quot;Error while sending data to redcap: &quot;, err.message);&amp;#10;      dumpError(err);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function dumpError(err) {&amp;#10;  if (typeof err === 'object') {&amp;#10;    if (err.message) {&amp;#10;      console.log('\nMessage: ' + err.message);&amp;#10;    }&amp;#10;    if (err.stack) {&amp;#10;      console.log('\nStacktrace:');&amp;#10;      console.log('====================');&amp;#10;      console.log(err.stack);&amp;#10;    }&amp;#10;  } else {&amp;#10;    console.log('dumpError :: argument is not an object');&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;SetTxtReady();&amp;#10;var res = GetData();&amp;#10;REDCapImportRecord(res);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import traceback&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr2()&amp;#10;if english:&amp;#10;    thx.text = &quot;Thank you for your participation!&quot;&amp;#10;else:&amp;#10;    thx.text = &quot;Merci de votre participation!&quot;&amp;#10;&amp;#10;#Get Data&amp;#10;try:&amp;#10;    df1 = pd.DataFrame.from_dict(thisExp.getAllEntries())&amp;#10;&amp;#10;    # Create all the variables we will need&amp;#10;    df1 = df1.assign(average_non_filler_statement1_NL=&quot;&quot;,average_non_filler_statement1_EL=&quot;&quot;,average_non_filler_statement1_A=&quot;&quot;,average_non_filler_statement1_T=&quot;&quot;,&amp;#10;    average_non_filler_statement2_NL=&quot;&quot;,average_non_filler_statement2_EL=&quot;&quot;,average_non_filler_statement2_A=&quot;&quot;,average_non_filler_statement2_T=&quot;&quot;,&amp;#10;    average_non_filler_statement3_NL=&quot;&quot;,average_non_filler_statement3_EL=&quot;&quot;,average_non_filler_statement3_A=&quot;&quot;,average_non_filler_statement3_T=&quot;&quot;,&amp;#10;    average_non_filler_trialDuration=&quot;&quot;,sBADE_evidence_integration=&quot;&quot;,sBADE_evidence_integration_norm_rev=&quot;&quot;,sBADE_conservatism=&quot;&quot;,sBADE_trial_duration=&quot;&quot;)&amp;#10;    &amp;#10;    #Select target trials&amp;#10;    df1 = df1.query('currentTrial &gt; 0')&amp;#10;    df1.reset_index(drop=True, inplace=True)&amp;#10;&amp;#10;    #We will now compute the scores&amp;#10;    df1[&quot;statement1_NL&quot;] = df1['statement1_NL'].div(100)&amp;#10;    df1[&quot;statement1_EL&quot;] = df1['statement1_EL'].div(100)&amp;#10;    df1[&quot;statement1_A&quot;] = df1['statement1_A'].div(100)&amp;#10;    df1[&quot;statement1_T&quot;] = df1['statement1_T'].div(100)&amp;#10;&amp;#10;    df1[&quot;statement2_NL&quot;] = df1['statement2_NL'].div(100)&amp;#10;    df1[&quot;statement2_EL&quot;] = df1['statement2_EL'].div(100)&amp;#10;    df1[&quot;statement2_A&quot;] = df1['statement2_A'].div(100)&amp;#10;    df1[&quot;statement2_T&quot;] = df1['statement2_T'].div(100)&amp;#10;&amp;#10;    df1[&quot;statement3_NL&quot;] = df1['statement3_NL'].div(100)&amp;#10;    df1[&quot;statement3_EL&quot;] = df1['statement3_EL'].div(100)&amp;#10;    df1[&quot;statement3_A&quot;] = df1['statement3_A'].div(100)&amp;#10;    df1[&quot;statement3_T&quot;] = df1['statement3_T'].div(100)&amp;#10;    &amp;#10;    sub_df = df1.query('Type == &quot;non-filler&quot;')&amp;#10;    sub_df.reset_index(drop=True, inplace=True)&amp;#10;&amp;#10;    df1[&quot;average_non_filler_statement1_NL&quot;] = sub_df['statement1_NL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement1_EL&quot;] = sub_df['statement1_EL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement1_A&quot;] = sub_df['statement1_A'].mean()&amp;#10;    df1[&quot;average_non_filler_statement1_T&quot;] = sub_df['statement1_T'].mean()&amp;#10;&amp;#10;    df1[&quot;average_non_filler_statement2_NL&quot;] = sub_df['statement2_NL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement2_EL&quot;] = sub_df['statement2_EL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement2_A&quot;] = sub_df['statement2_A'].mean()&amp;#10;    df1[&quot;average_non_filler_statement2_T&quot;] = sub_df['statement2_T'].mean()&amp;#10;&amp;#10;    df1[&quot;average_non_filler_statement3_NL&quot;] = sub_df['statement3_NL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement3_EL&quot;] = sub_df['statement3_EL'].mean()&amp;#10;    df1[&quot;average_non_filler_statement3_A&quot;] = sub_df['statement3_A'].mean()&amp;#10;    df1[&quot;average_non_filler_statement3_T&quot;] = sub_df['statement3_T'].mean()&amp;#10;&amp;#10;    df1[&quot;average_non_filler_trialDuration&quot;] = sub_df['trialDuration'].mean()&amp;#10;    df1[&quot;sBADE_trial_duration&quot;] = df1['average_non_filler_trialDuration'];&amp;#10;&amp;#10;    columns_sum1 = ['average_non_filler_statement1_A', 'average_non_filler_statement2_A', 'average_non_filler_statement3_A', 'average_non_filler_statement2_NL', 'average_non_filler_statement2_EL', 'average_non_filler_statement3_NL', 'average_non_filler_statement3_EL']&amp;#10;    df1[&quot;sBADE_evidence_integration&quot;] = df1[columns_sum1].sum(axis=1).iloc[0] - df1['average_non_filler_statement3_T'].iloc[0]&amp;#10;&amp;#10;    columns_sum2 = ['average_non_filler_statement1_NL', 'average_non_filler_statement1_EL', 'average_non_filler_statement1_T', 'average_non_filler_statement2_NL', 'average_non_filler_statement2_EL', 'average_non_filler_statement2_T', 'average_non_filler_statement3_T']&amp;#10;    df1[&quot;sBADE_conservatism&quot;] = df1[columns_sum2].sum(axis=1).iloc[0]&amp;#10;&amp;#10;    # Compute reverse sBADE evidence integration&amp;#10;    oldMax = -1&amp;#10;    oldMin = 7&amp;#10;    newMax = 1&amp;#10;    newMin = 0&amp;#10;    oldRange = oldMax-oldMin&amp;#10;    newRange = newMax-newMin&amp;#10;    oldValue = df1[&quot;sBADE_evidence_integration&quot;].iloc[0]&amp;#10;    newValue = (((oldValue-oldMin)*newRange)/oldRange)+newMin&amp;#10;    df1[&quot;sBADE_evidence_integration_norm_rev&quot;].iloc[0] = newValue&amp;#10;&amp;#10;    #print(&quot;new df1&quot;, df1.to_string().encode('utf-8'))&amp;#10;    #print(&quot;df1 size: &quot;, df1.size)&amp;#10;&amp;#10;    # Save task version and date&amp;#10;    taskVersion = &quot;Offline_v3.1.0&quot;&amp;#10;    taskName = &quot;iCog_BADE_stories_short&quot;&amp;#10;    df1[&quot;date_exp&quot;] = startingDate&amp;#10;    df1[&quot;task_version&quot;] = taskVersion&amp;#10;&amp;#10;    thisExp.addData('date_exp', df1[&quot;date_exp&quot;].iloc[0])&amp;#10;    thisExp.addData('task_version', df1[&quot;task_version&quot;].iloc[0])&amp;#10;    thisExp.addData('sBADE_evidence_integration', df1['sBADE_evidence_integration'].iloc[0])&amp;#10;    thisExp.addData('sBADE_evidence_integration_norm_rev', df1['sBADE_evidence_integration_norm_rev'].iloc[0])&amp;#10;    thisExp.addData('sBADE_conservatism', df1['sBADE_conservatism'].iloc[0])&amp;#10;    thisExp.addData('sBADE_trial_duration', df1['sBADE_trial_duration'].iloc[0])&amp;#10;except Exception:&amp;#10;    print(&quot;An exception occurred. Error while computing scores.&quot;)&amp;#10;    traceback.print_exc()&amp;#10;&amp;#10;# Send data to redcap&amp;#10;try:&amp;#10;    import requests, hashlib&amp;#10;    # Transform data to JSON Format&amp;#10;    # If we add or remove columns in the Google file, we must also change the variables here&amp;#10;    myDict = {}&amp;#10;    myDict[&quot;record_id&quot;] = df1['participant'].iloc[0]&amp;#10;    myDict[redcapVars[1]] = df1['date_exp'].iloc[0]&amp;#10;    myDict[redcapVars[2]] = df1['task_version'].iloc[0]&amp;#10;    myDict[redcapVars[3]] = df1['sBADE_evidence_integration'].iloc[0]&amp;#10;    myDict[redcapVars[4]] = df1['sBADE_evidence_integration_norm_rev'].iloc[0]&amp;#10;    myDict[redcapVars[5]] = df1['sBADE_conservatism'].iloc[0]&amp;#10;    myDict[redcapVars[6]] = df1['sBADE_trial_duration'].iloc[0]&amp;#10;&amp;#10;    data_to_send = [myDict]&amp;#10;&amp;#10;    #print(&quot;data to send: &quot;, data_to_send)&amp;#10;&amp;#10;    url = 'https://portal.rimuhc.ca/cim/redcap/api/'&amp;#10;&amp;#10;    redcap_data = {&amp;#10;        'token': redcapVars[0],&amp;#10;        'content': 'record',&amp;#10;        'format': 'json',&amp;#10;        'type': 'flat',&amp;#10;        'overwriteBehavior': 'normal',&amp;#10;        'forceAutoNumber': 'false',&amp;#10;        'data': json.dumps(data_to_send),&amp;#10;        'returnContent': 'ids',&amp;#10;        'returnFormat': 'json',&amp;#10;        'record_id': hashlib.sha1().hexdigest()[:16]&amp;#10;    }&amp;#10;&amp;#10;    x = requests.post(url, data = redcap_data)&amp;#10;&amp;#10;    print(x.text)&amp;#10;    print(&quot;Data sent to redcap.&quot;)&amp;#10;    &amp;#10;except Exception:&amp;#10;    print(&quot;An exception occurred. Error while sending data to redcap.&quot;)&amp;#10;    traceback.print_exc()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_thx" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="thx">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="thx" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for your participation!" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="prac">
      <CodeComponent name="code_pr">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="mouse_clicked = False #boulean to check if the button was pressed&amp;#10;import pandas as pd&amp;#10;import random" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="mouse_clicked = false;&amp;#10;randomSliders_pr = [];" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="curStatement = 1; //display first statement by default&amp;#10;end_text = &quot;&quot;; //text of ending button&amp;#10;col = new util.Color('black');&amp;#10;slider1_is_initialized = false; //true when we set the color of slider1..&amp;#10;slider2_is_initialized = false;&amp;#10;slider3_is_initialized = false;&amp;#10;slider4_is_initialized = false;&amp;#10;allRatings = false; //true when the user rated on all 4 sliders&amp;#10;&amp;#10;// Save results&amp;#10;trialDuration_pr = -1;&amp;#10;&amp;#10;//define sliders (defining them here fix the labels position issue)&amp;#10;slider1_pr = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, 0.01], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider2_pr = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.122], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider3_pr = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.25], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;slider4_pr = new visual.Slider({&quot;win&quot;: win, &quot;name&quot;: &quot;rating&quot;, &quot;size&quot;: [1.4, 0.03], &quot;pos&quot;: [0, -0.38], &quot;labels&quot;: [&quot;0%&quot;, &quot;100%&quot;], &quot;ticks&quot;: [0, 100], &quot;granularity&quot;: 0, &quot;style&quot;: [&quot;rating&quot;], &quot;color&quot;: &quot;Gray&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;flip&quot;: false, &quot;labelHeight&quot;: 0.03, &quot;markerColor&quot;: [-1, -1, -1], &quot;lineColor&quot;: &quot;White&quot;, &quot;barSize&quot;: [1, 0.01]});&amp;#10;&amp;#10;// Shuffle the statements&amp;#10;randomSliders_pr = &amp;#10;[ &amp;#10;    [0, &quot;NL&quot;, sliderSub1, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [1, &quot;EL&quot;, sliderSub2, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [2, &quot;A&quot;, sliderSub3, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],&amp;#10;    [3, &quot;T&quot;, sliderSub4, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ]&amp;#10;];&amp;#10;&amp;#10;function shuffleArray(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        const j = Math.floor(Math.random() * (i + 1));&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;shuffleArray(randomSliders_pr);&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtInstr()&amp;#10;function SetTxtInstr(){&amp;#10;    if (english){&amp;#10;        txt_next_pr.text = &quot;NEXT&quot;;&amp;#10;        end_text = &quot;DONE&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        txt_next_pr.text = &quot;SUIVANT&quot;;&amp;#10;        end_text = &quot;COMPLÉTÉ&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;SetTxtInstr();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="curStatement = 1 #display first statement by default&amp;#10;end_text = &quot;&quot; #text of ending button&amp;#10;col = 'black'&amp;#10;slider1_is_initialized = False #true when we set the color of slider1..&amp;#10;slider2_is_initialized = False&amp;#10;slider3_is_initialized = False&amp;#10;slider4_is_initialized = False&amp;#10;allRatings = False #true when the user rated on all 4 sliders&amp;#10;&amp;#10;#Save results&amp;#10;trialDuration_pr = -1&amp;#10;&amp;#10;#define sliders (defining them here fix the labels position issue)&amp;#10;slider1_pr = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, 0.01), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider2_pr = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.122), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider3_pr = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.25), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;slider4_pr = visual.Slider(win=win, name='rating', size=(1.4, 0.03), pos=(0, -0.38), labels=(&quot;0%&quot;, &quot;100%&quot;), ticks=(0, 100), granularity=0, style=(&quot;rating&quot;), color='Gray', font='Arial', flip = False, labelHeight= 0.03)&amp;#10;&amp;#10;# Shuffle the statements&amp;#10;randomSliders_pr = [ \&amp;#10;    [0, &quot;NL&quot;, sliderSub1, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [1, &quot;EL&quot;, sliderSub2, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [2, &quot;A&quot;, sliderSub3, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ],\&amp;#10;    [3, &quot;T&quot;, sliderSub4, [&quot;&quot;, &quot;&quot;, &quot;&quot;] ]]&amp;#10;&amp;#10;random.shuffle(randomSliders_pr)&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    txt_next_pr.text = &quot;NEXT&quot;&amp;#10;    end_text = &quot;DONE&quot;&amp;#10;else:&amp;#10;    txt_next_pr.text = &quot;SUIVANT&quot;&amp;#10;    end_text = &quot;COMPLÉTÉ&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Prepare the initialisation of the sliders&amp;#10;if slider1_is_initialized == False and statement1_pr.status == STARTED:&amp;#10;    slider1_is_initialized  = True&amp;#10;    slider2_is_initialized  = True&amp;#10;    slider3_is_initialized  = True&amp;#10;    slider4_is_initialized  = True&amp;#10;    &amp;#10;    sliders = (slider1_pr,slider2_pr,slider3_pr,slider4_pr)&amp;#10;    for slider in sliders:&amp;#10;        try:&amp;#10;            slider.marker.color = col&amp;#10;            slider.marker.size = (0.025, 0.025)&amp;#10;            slider._barSize = (1, 0.01)&amp;#10;            slider._onChange(True)()&amp;#10;            slider._setupSlider()&amp;#10;        except:&amp;#10;            print(&quot;An exception while initializing slider occurred&quot;)&amp;#10;    &amp;#10;#Check if the user rated on all sliders&amp;#10;if slider1_pr.getRating() != None and slider2_pr.getRating() != None and slider3_pr.getRating() != None and slider4_pr.getRating() != None:&amp;#10;    allRatings = True&amp;#10;else:&amp;#10;    allRatings = False&amp;#10;&amp;#10;#Code that will display next instruction or go to next routine&amp;#10;if next_pr.contains(mouse_pr) and mouse_pr.getPressed()[0] == True and allRatings:&amp;#10;    if mouse_clicked == False:&amp;#10;        mouse_clicked = True&amp;#10;        if curStatement == 1:&amp;#10;            statement2_pr.setOpacity(1)&amp;#10;            curStatement = 2&amp;#10;            statement1_NL_pr = slider1_pr.getRating()&amp;#10;            statement1_EL_pr = slider2_pr.getRating()&amp;#10;            statement1_A_pr = slider3_pr.getRating()&amp;#10;            statement1_T_pr = slider4_pr.getRating()&amp;#10;        elif curStatement == 2:&amp;#10;            statement3_pr.setOpacity(1)&amp;#10;            curStatement = 3&amp;#10;            txt_next_pr.text = end_text&amp;#10;            statement2_NL_pr = slider1_pr.getRating()&amp;#10;            statement2_EL_pr = slider2_pr.getRating()&amp;#10;            statement2_A_pr = slider3_pr.getRating()&amp;#10;            statement2_T_pr = slider4_pr.getRating()&amp;#10;        else:&amp;#10;            statement3_NL_pr = slider1_pr.getRating()&amp;#10;            statement3_EL_pr = slider2_pr.getRating()&amp;#10;            statement3_A_pr = slider3_pr.getRating()&amp;#10;            statement3_T_pr = slider4_pr.getRating()&amp;#10;            trialDuration_pr = t&amp;#10;            continueRoutine = False #go to next routine&amp;#10;else:&amp;#10;    mouse_clicked = False&amp;#10;&amp;#10;#Change the color of highlighed rect&amp;#10;if next_pr.contains(mouse_pr):&amp;#10;    next_pr.opacity=0.99&amp;#10;    txt_next_pr.opacity=2&amp;#10;else:&amp;#10;    next_pr.opacity=0.73&amp;#10;    txt_next_pr.opacity=0.73&amp;#10;&amp;#10;#Display rating of each slider&amp;#10;    ratings = ((slider1_pr, sliderV1_pr), (slider2_pr, sliderV2_pr), (slider3_pr, sliderV3_pr), (slider4_pr, sliderV4_pr))&amp;#10;    for slider_ in ratings:&amp;#10;        if slider_[0].getRating():&amp;#10;            slider_[1].text = str(int(round(slider_[0].markerPos))) + &quot;%&quot;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Initialize slider&amp;#10;function InitializeSlider(slider){&amp;#10;     try {&amp;#10;        slider._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider._skin.MARKER_SIZE = [0.025, 0.025];&amp;#10;        slider._barSize = [1, 0.01];&amp;#10;        slider._onChange(true)();&amp;#10;        slider._setupSlider();&amp;#10;    } catch (err) {}&amp;#10;}&amp;#10;&amp;#10;//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Prepare the initialisation of the sliders&amp;#10;function PrepSlidersInit(){&amp;#10;    if (!slider1_is_initialized &amp;&amp; statement1_pr.status === STARTED){&amp;#10;        slider1_is_initialized  = true;&amp;#10;        slider2_is_initialized  = true;&amp;#10;        slider3_is_initialized  = true;&amp;#10;        slider4_is_initialized  = true;&amp;#10;        InitializeSliders();&amp;#10;    }    &amp;#10;}&amp;#10;&amp;#10;//Initialize sliders&amp;#10;function InitializeSliders(){&amp;#10;    const array_ = [slider1_pr,slider2_pr,slider3_pr,slider4_pr];&amp;#10;    array_.map(x =&gt;InitializeSlider(x));&amp;#10;}&amp;#10;&amp;#10;// Check if the user rated on all sliders&amp;#10;function CheckAllRatingsDone(){&amp;#10;    if (slider1_pr.getRating() !== undefined &amp;&amp; slider2_pr.getRating() !== undefined &amp;&amp; slider3_pr.getRating() !== undefined &amp;&amp; slider4_pr.getRating() !== undefined){&amp;#10;        allRatings = true;&amp;#10;     }&amp;#10; else&amp;#10;    allRatings = false;&amp;#10;}&amp;#10;&amp;#10;//Function that will display next instruction or go to next routine&amp;#10;function DisplayNext(){&amp;#10;    //Display next instruction&amp;#10;    if (next_pr.contains(mouse_pr) &amp;&amp; mouse_pr.getPressed()[0] === 1 &amp;&amp; allRatings){&amp;#10;        if (!mouse_clicked){&amp;#10;            mouse_clicked = true;&amp;#10;            if (curStatement === 1){&amp;#10;                statement2_pr.setOpacity(1);&amp;#10;                randomSliders_pr[0][3][curStatement-1] = slider1_pr.getRating();&amp;#10;                randomSliders_pr[1][3][curStatement-1] = slider2_pr.getRating();&amp;#10;                randomSliders_pr[2][3][curStatement-1] = slider3_pr.getRating();&amp;#10;                randomSliders_pr[3][3][curStatement-1] = slider4_pr.getRating();&amp;#10;                curStatement = curStatement + 1;&amp;#10;            }&amp;#10;            else if(curStatement === 2){&amp;#10;                statement3_pr.setOpacity(1);&amp;#10;                randomSliders_pr[0][3][curStatement-1] = slider1_pr.getRating();&amp;#10;                randomSliders_pr[1][3][curStatement-1] = slider2_pr.getRating();&amp;#10;                randomSliders_pr[2][3][curStatement-1] = slider3_pr.getRating();&amp;#10;                randomSliders_pr[3][3][curStatement-1] = slider4_pr.getRating();&amp;#10;                curStatement = curStatement + 1;&amp;#10;                txt_next_pr.text = end_text;&amp;#10;            }&amp;#10;            else{&amp;#10;                randomSliders_pr[0][3][curStatement-1] = slider1_pr.getRating();&amp;#10;                randomSliders_pr[1][3][curStatement-1] = slider2_pr.getRating();&amp;#10;                randomSliders_pr[2][3][curStatement-1] = slider3_pr.getRating();&amp;#10;                randomSliders_pr[3][3][curStatement-1] = slider4_pr.getRating();&amp;#10;                trialDuration_pr = t&amp;#10;                continueRoutine = false; //go to next routine&amp;#10;             }&amp;#10;        }     &amp;#10;    }&amp;#10;    else{&amp;#10;        mouse_clicked = false;&amp;#10;     }&amp;#10;}&amp;#10;&amp;#10;//Display ratings values:&amp;#10;function DisplayRating(slider_,slider_score){&amp;#10;    if(slider_.getRating()){&amp;#10;        slider_score.text = Math.round(slider_.markerPos) + &quot;%&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Display rating of each slider&amp;#10;function DisplayRatings(){&amp;#10;    const array1 = [[slider1_pr, sliderV1_pr],[slider2_pr,sliderV2_pr],[slider3_pr, sliderV3_pr], [slider4_pr, sliderV4_pr]];&amp;#10;    array1.map(x =&gt;DisplayRating(x[0],x[1]));&amp;#10;}&amp;#10;&amp;#10;PrepSlidersInit();&amp;#10;CheckAllRatingsDone();&amp;#10;DisplayNext();&amp;#10;HighlightRect(next_pr, txt_next_pr, mouse_pr);&amp;#10;DisplayRatings();" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Save results&amp;#10;&amp;#10;//Save the order the statements were presented &amp;#10;psychoJS.experiment.addData('slidersRandomized', randomSliders_pr);&amp;#10;&amp;#10;// Reorder array&amp;#10;function sortArray(a, b) {&amp;#10;    if (a[0] === b[0]) {&amp;#10;        return 0;&amp;#10;    }&amp;#10;    else {&amp;#10;        return (a[0] &lt; b[0]) ? -1 : 1;&amp;#10;    }&amp;#10;}&amp;#10;randomSliders_pr.sort(sortArray);&amp;#10;&amp;#10;for (let i=0; i&lt;4; i++){&amp;#10;    let statementType = randomSliders_pr[i][1];&amp;#10;    for (let j=0; j&lt;3; j++){&amp;#10;        let strStatement = &quot;statement&quot;.concat((j+1).toString(),&quot;_&quot;, statementType);&amp;#10;        psychoJS.experiment.addData(strStatement, randomSliders_pr[i][3][j]);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;psychoJS.experiment.addData('trialDuration', trialDuration_pr);&amp;#10;&amp;#10;//Reset some elements for next trial&amp;#10;function ResetElements(){&amp;#10;    statement2_pr.setOpacity(0);&amp;#10;    statement3_pr.setOpacity(0);&amp;#10;    const array2 = [sliderV1_pr, sliderV2_pr, sliderV3_pr, sliderV4_pr];&amp;#10;    array2.map(x =&gt;x.text=&quot;&quot;);&amp;#10;}&amp;#10;&amp;#10;ResetElements();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="import codecs&amp;#10;import sys&amp;#10;import io&amp;#10;&amp;#10;#Save results&amp;#10;&amp;#10;#Save the order the statements were presented &amp;#10;thisExp.addData('slidersRandomized', randomSliders_pr)&amp;#10;&amp;#10;#Reorder array&amp;#10;randomSliders_pr = sorted(randomSliders_pr, key=lambda x: x[0])&amp;#10;&amp;#10;for i in range(0, 4):&amp;#10;    statementType = randomSliders_pr[i][1]&amp;#10;    for j in range(0, 3):&amp;#10;        strStatement = &quot;statement&quot;+str(j+1)+&quot;_&quot;+ statementType&amp;#10;        thisExp.addData(strStatement, randomSliders_pr[i][3][j])&amp;#10;&amp;#10;thisExp.addData('trialDuration', trialDuration_pr)&amp;#10;&amp;#10;#Reset some elements for next trial&amp;#10;statement2_pr.opacity=0&amp;#10;statement3_pr.opacity=0&amp;#10;array2 = (sliderV1_pr, sliderV2_pr, sliderV3_pr, sliderV4_pr)&amp;#10;for arr in array2:&amp;#10;    arr.text=&quot;&quot;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_pr" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="stateBox_pr">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="lightGrey" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="lightGrey" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="stateBox_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.285)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(1.4, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="statement1_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement1_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state1" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="statement2_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement2_pr" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.28)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state2" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="statement3_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="statement3_pr" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.21)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$state3" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="slider1_pr">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="'0%','100%'" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider1_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.01)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0,100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider2_pr">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider2_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.122)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider3_pr">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider3_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider4_pr">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="Gray" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="&quot;0%&quot;, &quot;100%&quot;" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider4_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.38)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.4, 0.03)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(0, 1)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="sliderS1_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS1_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider1_pr.pos[0],slider1_pr.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders_pr[0][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS2_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS2_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider2_pr.pos[0],slider2_pr.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders_pr[1][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS3_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS3_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider3_pr.pos[0],slider3_pr.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders_pr[2][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderS4_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderS4_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider4_pr.pos[0],slider4_pr.pos[1]+0.03)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$randomSliders_pr[3][2]" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV1_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV1_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider1_pr.pos[0]+0.74, slider1_pr.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV2_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV2_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider2_pr.pos[0]+0.74, slider2_pr.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV3_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV3_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider3_pr.pos[0]+0.74, slider3_pr.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="sliderV4_pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.02" valType="code" updates="constant" name="letterHeight"/>
        <Param val="sliderV4_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(slider4_pr.pos[0]+0.74, slider4_pr.pos[1])" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_pr">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_pr" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.463)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$allRatings" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_pr.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$allRatings" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_pr">
        <Param val="next_pr" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_pr" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="ready">
      <CodeComponent name="code_rdy">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//Change the text according to the selected language, function SetTxtInstr2()&amp;#10;function SetTxtReady(){&amp;#10;    if (english){&amp;#10;        txt_rdy.text = &quot;Ready to begin?&quot;;&amp;#10;        txt_next_rdy.text = &quot;BEGIN&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        txt_rdy.text = &quot;Prêt à commencer ?&quot;;&amp;#10;        txt_next_rdy.text = &quot;COMMENCER&quot;;&amp;#10;    }&amp;#10;}&amp;#10;SetTxtReady();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Change the text according to the selected language, function SetTxtInstr2()&amp;#10;if english:&amp;#10;    txt_rdy.text = &quot;Ready to begin?&quot;&amp;#10;    txt_next_rdy.text = &quot;BEGIN&quot;&amp;#10;else:&amp;#10;    txt_rdy.text = &quot;Prêt à commencer ?&quot;&amp;#10;    txt_next_rdy.text = &quot;COMMENCER&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Change the color of highlighed rect&amp;#10;if next_rdy.contains(mouse_rdy):&amp;#10;        next_rdy.opacity=0.99&amp;#10;        txt_next_rdy.opacity=2&amp;#10;else:&amp;#10;        next_rdy.opacity=0.73&amp;#10;        txt_next_rdy.opacity=0.73" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(next_rdy, txt_next_rdy, mouse_rdy);" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_rdy" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="txt_rdy">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_rdy" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Ready to begin?" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_rdy">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_rdy" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_rdy">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_rdy" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_rdy.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_rdy">
        <Param val="next_rdy" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_rdy" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="lang"/>
    <Routine name="instr"/>
    <LoopInitiator loopType="TrialHandler" name="practices">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$practiceConditions" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practices" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac"/>
    <LoopTerminator name="practices"/>
    <Routine name="ready"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$trialConditions" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
